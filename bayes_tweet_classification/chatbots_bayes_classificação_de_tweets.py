# -*- coding: utf-8 -*-
"""Chatbots - Bayes Classificação de Tweets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L-TpiyvZs1dZ_yggBsNAA1s8ydRVqru5

# Chatbots - Classificação de Tweets (Tweet Classification)

> Faça um classificador que leia os tweets do arquivo "Tweets.csv" e classifique sentenças fornecidas pelo usuário como "Positiva", "Neutra" e "Negativa".

**Requisitos:**

1.   Ler o arquivo "Tweets.csv";
2.   Utilizar o processo de Tokenization;
3.   Utilizar o processo de Bag of Words;
4.   Classificar usando Bayes;
4.   Utilizar as colunas "airline_sentiment" e ;

> Fonte dataset: https://raw.githubusercontent.com/gomesfg/chatbots/ceba8bfa8c26320457ffb6559d02766e0711f802/tweet_classification/Tweets.csv

---
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud, STOPWORDS

# Importando arquivo com os tweets
tweets = pd.read_csv('https://raw.githubusercontent.com/gomesfg/chatbots/ceba8bfa8c26320457ffb6559d02766e0711f802/tweet_classification/Tweets.csv')

# Mostrar dados do arquivo
tweets.head()

"""# Frequencia de sentimentos"""

plt.figure(figsize=(3,5))
sns.countplot(tweets['airline_sentiment'], order =tweets.airline_sentiment.value_counts().index,palette= 'plasma')
plt.show()

"""# Word Cloud"""

new_df=tweets[tweets['airline_sentiment']=='negative']
words = ' '.join(new_df['text'])
cleaned_word = " ".join([word for word in words.split()
                            if 'http' not in word
                                and not word.startswith('@')
                                and word != 'RT'
                            ])
wordcloud = WordCloud(stopwords=STOPWORDS,
                      background_color='black',
                      width=3000,
                      height=2500
                     ).generate(cleaned_word)
plt.figure(1,figsize=(12, 12))
plt.imshow(wordcloud)
plt.axis('off')
plt.show()

"""# StopWords"""

stop=['I',
 'me',
 'my',
 'myself',
 'we',
 'our',
 'ours',
 'ourselves',
 'you',"it's"]
tweets['text']=tweets['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))
tweets.head()

"""# "Tokenization" e "Bag of Words""""

def get_positive_words_dataframe():
    positive_tweets = tweets[tweets.airline_sentiment == 'positive']
    return positive_tweets.text.str.split(expand=True).stack().value_counts().rename_axis('word').reset_index(name='positive')

def get_negative_words_dataframe():
    negative_tweets = tweets[tweets.airline_sentiment == 'negative']
    return negative_tweets.text.str.split(expand=True).stack().value_counts().rename_axis('word').reset_index(name='negative')

def get_neutral_words_dataframe():
    neutral_tweets = tweets[tweets.airline_sentiment == 'neutral']
    return neutral_tweets.text.str.split(expand=True).stack().value_counts().rename_axis('word').reset_index(name='neutral')

def create_counted_words_dataframe(positive_dataframe, negative_dataframe, neutral_dataframe):
    return positive_dataframe.set_index('word').join(negative_dataframe.set_index('word')).join(neutral_dataframe.set_index('word'))

def fill_na_with_zeros(dataframe):
    for column in dataframe.columns:
        dataframe[column].fillna(0, inplace=True)

positive_dataframe = get_positive_words_dataframe()
negative_dataframe = get_negative_words_dataframe()
neutral_dataframe = get_neutral_words_dataframe()

dataframe = create_counted_words_dataframe(positive_dataframe, negative_dataframe, neutral_dataframe)
fill_na_with_zeros(dataframe)
#positive_dataframe
dataframe

"""# Classificação utilizando o método de Bayes"""

def classify_phrase_using_bayes(phrase, dataframe):
    display(phrase)
    
    moods = ['positive', 'negative', 'neutral'];
    for mood in moods:
        probability = calculate_bayes(phrase, dataframe, mood)
        display(mood+": "+str(probability))
    

def calculate_bayes(phrase, dataframe, mood):
    A_probability = get_mood_probability(dataframe, mood)
    B_probability = get_phrase_probability(phrase, dataframe, mood)
    B_to_A_probability = get_B_to_A_probability(phrase, dataframe, mood)
    
    A_to_B_probability = B_to_A_probability * A_probability / B_probability
    
    return A_to_B_probability

def get_mood_probability(dataframe, mood):
    total_mood_resgisters = get_total_registers_from_mood(mood)
    total_registers = get_total_registers_from_dataframe(dataframe)
    return total_mood_resgisters/total_registers

def get_phrase_probability(phrase, dataframe, mood):
    words_occurrences = 0;
    words = phrase.split()
    for word in words:
        words_occurrences += get_total_of_occurrence_of_word(word, dataframe)

    total_registers = get_total_registers_from_dataframe(dataframe)
        
    return words_occurrences/total_registers

def get_B_to_A_probability(phrase, dataframe, mood):
    words_occurrences = 0;
    words = phrase.split()
    for word in words:
        words_occurrences += dataframe.loc[word][mood]

    total_mood = get_total_registers_from_mood(mood)
        
    return words_occurrences/total_mood
    
def get_total_registers_from_mood(mood):
    return dataframe[mood].sum()

def get_total_of_occurrence_of_word(word, dataframe):
    return dataframe.loc[word].sum();

def get_total_registers_from_dataframe(dataframe):
    total_positives = get_total_registers_from_mood('positive')
    total_negatives = get_total_registers_from_mood('negative')
    total_neutrals = get_total_registers_from_mood('neutral')
    return total_positives+total_negatives+total_neutrals

phrase_to_test = 'love flying'
classify_phrase_using_bayes(phrase_to_test, dataframe)